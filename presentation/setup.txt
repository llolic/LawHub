RUNNING CREATE-REACT-APP 
- Install node.js v10.16 (this should install npm as well)
- npm install -g create-react-app
- npm install @material-ui/core
- npm install @material-ui/icons
- npm install js-cookie *NEW*
- npm install react-compound-timer *NEW*


- go to presentation folder and run "npm start" 
    - if this breaks, try "npm install" then "npm start"

React 'props' vs. 'state' (this is how I think of it, it may not be 100% correct)
- props
    - data passed from a parent component used to render information
    - if props changes, component will update automatically
    - for "appearance"
    - ex: <Button className="btn_blue" text="Submit"/>
        className and text are both props, you can add as many as you want
- state
    - can be changed by some event occuring on the component 
    - must have an event handler to update the state, so it rerenders
    - for "business logic"
    - components don't have to have a state (these are functional components)
- state should not have elements of props

App.js
- The main wrapper component for the entire web app 
- renders certain components based on the route
- probably will need to be changed as we add features

Components
- Button: for now only takes 2 props - className and text
- Navbar: pretty much hard coded into App.js so it always renders
- SearchBar: part of Navbar, need to implement its functions
- StudentRegistration: entire registration form, mostly consists of material-ui TextFields

Styles (index.css and material-ui)
- using material-ui is easier since they have preset styles (also better functionality)
- .[CLASSNAME] in index.css will be applied to components with the prop className=[CLASSNAME]
- try to not position and size components based on 'px' since it won't scale

Constants
- Some hardcoded values for form selection
- Probably better if we can pull these from the db

Files to ignore:
- index.js
- serviceWorker.js
- setupTests.js
- App.test.js
